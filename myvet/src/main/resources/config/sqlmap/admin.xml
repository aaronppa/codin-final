<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.codin.repository.mapper.AdminMapper">
	<resultMap type="Notice" id="noticeMap">
		<result column="notice_no" property="noticeNo"/>		
		<result column="notice_title" property="noticeTitle"/>		
		<result column="notice_writer" property="noticeWriter"/>		
		<result column="notice_reg_date" property="noticeRegDate"/>		
		<result column="notice_view_cnt" property="noticeViewCnt"/>		
		<result column="notice_content" property="noticeContent"/>		
		<result column="temp_save" property="tempSave"/>
 		<association column="notice_writer" property="member" select="selectMemberByNo"></association>
	</resultMap>
		
	<resultMap type="Member" id="memberMap">
		<result column="member_no" property="memberNo"/>
		<result column="member_email" property="memberEmail"/>
		<result column="member_grade" property="memberGrade"/>
		<result column="member_name" property="memberName"/>
		<result column="member_phone" property="memberPhone"/>
		<result column="member_nickname" property="memberNickname"/>
		<result column="hos_code" property="hosCode"/>
		<result column="member_career" property="memberCareer"/>
		<result column="mailing_opt" property="mailingOpt"/>
		<result column="member_ori_name" property="memberOriName"/>
		<result column="member_sys_name" property="memberSysName"/>
		<result column="member_file_path" property="memberFilePath"/>
		<result column="member_file_size" property="memberFileSize"/>
		<result column="member_file_reg_date" property="memberFileRegDate"/>
		<collection column="member_no" property="vetAuth" select="selectVetAuthByNo"></collection>
	</resultMap>
	
	<resultMap type="VetAuth" id="vetAuthMap">
		<result column="vet_file_no" property="vetFileNo" />
		<result column="member_no" property="memberNo" />
		<result column="vet_ori_name" property="vetOriName" />
		<result column="vet_sys_name" property="vetSysName" />
		<result column="vet_file_path" property="vetFilePath" />
		<result column="vet_file_size" property="vetFileSize" />
		<result column="vet_file_reg_date" property="vetFileRegDate" />		
	</resultMap>
	
	<!-- 
		분명 문자열 비교 구문인데 NumberFormatException이 발생하는 상황이다.
		결론적으로 위 현상은 myBatis 문제는 아니고 OGNL(Object Graph Navigation Language) 의 문제이다.
		OGNL 인터프리터에서는 위 구문의 ‘Y’를 char 형으로 인식하고, ‘YY’나 “Y”는 String으로 인식한다. (따옴표를 잘보자)
		그래서 <if test=”stringValue == ‘Y’”> 이와 같은 구문을 비교할 때  NumberFormat으로 비교를 시도하여 Exception이 발생한다.
		이유는 java의 char형은 실제로 문자의 코드값을 저장하기 때문이다. 그래서 아래와 같은 형변환이 가능하다. 
		1. <if test=’stringValue == “Y”‘> – 쌍따옴표와 홑따옴표의 위치를 변경
		2. <if test=”stringValue == &quot;Y&quot;”> – 쌍따옴표를 HTML 코드로 변경
		3. <if test=”stringValue == ‘Y’.toString()”> – toString() 함수를 사용해 String 형으로 변환
		
		http://t-ara72.blogspot.com/2013/10/mybatis-numberformatexception.html
	-->
	
	<select id="noticeList" parameterType="Search" resultMap="noticeMap">
		select *
		from notice
		<where>
			<if test='memberId!=null and memberId!=""'>
				notice_writer = #{memberId}
			</if>
			<if test='keyword!=null and keyword!=""'>
				and concat(notice_title, notice_content) like CONCAT('%',#{keyword},'%')
			</if>
			<if test="status==1">
				and temp_save = #{status}
			</if>
		</where>
		order by notice_no desc
		limit #{begin}, #{pageNum}
	</select>
	
	<select id="memberList" parameterType="Search" resultMap="memberMap">
		select *
		from member
		<where>
			<choose>
			<when test='memberType=="P"'>
				member_grade = #{memberType} or member_grade = 'H'
			</when>	
			<when test='memberType=="VPH"'>
				member_grade = 'V' or member_grade = 'P' or member_grade = 'H' or member_grade = 'R'
			</when>	
			<when test='memberType!=null and memberType!="" and memberType!="VPH" and memberType!="P"'>
				member_grade = #{memberType}
			</when>
			<when test="memberId=='account'">
				and member_email like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='nickname'">
				and member_nickname like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='name'">
				and member_name like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='email'">
				and member_email like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='nickname'">
				and member_nickname like CONCAT('%',#{keyword},'%')
			</when>
			</choose>
		</where>
		order by member_no desc
		limit #{begin}, #{pageNum}
	</select>
	
	<select id="noticeDetail" parameterType="int" resultMap="noticeMap">
		select *
		from notice
		where notice_no = #{no}
	</select>
	
	<select id="noticeCount" parameterType="Search" resultType="int">
		select count(*)
		from notice
		<where>
			<if test='memberId!=null and memberId!=""'>
				notice_writer = #{memberId}
			</if>
			<if test='keyword!=null and keyword!=""'>
				and concat(notice_title, notice_content) like CONCAT('%',#{keyword},'%')
			</if>
			<if test="status==1">
				and temp_save = #{status}
			</if>
		</where>
	</select>
	
	<select id="memberCount" parameterType="Search" resultType="int">
		select count(*)
		from member
		<where>
			<choose>
			<when test='memberType=="P"'>
				member_grade = #{memberType} or member_grade = 'H'
			</when>	
			<when test='memberType=="VPH"'>
				member_grade = 'V' or member_grade = 'P' or member_grade = 'H' or member_grade = 'R'
			</when>	
			<when test='memberType!=null and memberType!="" and memberType!="VPH" and memberType!="P"'>
				member_grade = #{memberType}
			</when>
			<when test="memberId=='account'">
				and member_email like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='nickname'">
				and member_nickname like CONCAT('%',#{keyword},'%')
			</when>
			<when test="memberId=='name'">
				and member_name like CONCAT('%',#{keyword},'%')
			</when>
			</choose>
		</where>
	</select>
	
	<select id="selectVetAuthByNo" parameterType="int" resultMap="vetAuthMap">
		select *
		from vet_auth 
		where member_no = #{no}
	</select>
	
	<select id="selectMemberByNo" parameterType="int" resultMap="memberMap">
		select *
		from member
		where member_no=#{no}
	</select>
	
	<insert id="insertNotice" parameterType="Notice">
		insert into notice(
				notice_title, notice_writer, notice_content
			) values (
				#{noticeTitle}, #{noticeWriter},#{noticeContent}
			)
	</insert>
	
	<insert id="insertNoticeSave" parameterType="Notice">
		insert into notice(
				notice_title, notice_writer, notice_content, temp_save
			) values (
				#{noticeTitle}, #{noticeWriter},#{noticeContent}, 1
			)
	</insert>
	
	<update id="updateApproval" parameterType="Member">
		update member
		set member_grade = #{memberGrade}
		where member_no = #{memberNo}
	</update>
</mapper>
